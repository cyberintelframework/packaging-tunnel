#!/usr/bin/perl

use Switch;
use Debconf::Client::ConfModule ':all';

# Color codes
$n = "\033[0;39m";
$y = "\033[1;33m";
$r = "\033[1;31m";
$g = "\033[1;32m";

# predefined variables
$targetdir = "/opt/surfnetids/";
$logfile = "$targetdir/tunnel-debinstall.err";
$apachesite = "/etc/apache2/sites-enabled/";
$ssldir = "/etc/apache2/surfidsssl/";
$ts = time();

# Setting up debconf
version('2.0');
my $capb=capb('backup');

# Setting up state machine for debconf to use
$state = 1;
$redo = 0;
$empty = 0;
open(LOG, "> /opt/surfnetids/tunnel-debinstall.log");
# end + 1
while ($state < 11 && $state != 0) {
    switch($state) {
        case 1 {
            input("high", "surfids-tunnel/keysize");            
        }
        case 2 {
            @ret = get("surfids-tunnel/keysize");
            $key_size = $ret[1];
            if ("$key_size" eq "") {
                $empty = 1;
                input("high", "surfids-tunnel/empty");
            } else {
                input("high", "surfids-tunnel/keycountry");
            }
        }
        case 3 {
            @ret = get("surfids-tunnel/keycountry");
            $key_country = $ret[1];
            if ("$key_country" eq "") {
                $empty = 1;
                input("high", "surfids-tunnel/empty");
            } else {
                input("high", "surfids-tunnel/keyprov");
            }
        }
        case 4 {
            @ret = get("surfids-tunnel/keyprov");
            $key_prov = $ret[1];
            if ("$key_prov" eq "") {
                $empty = 1;
                input("high", "surfids-tunnel/empty");
            } else {
                input("high", "surfids-tunnel/keycity");
            }
        }
        case 5 {
            @ret = get("surfids-tunnel/keycity");
            $key_city = $ret[1];
            if ("$key_city" eq "") {
                $empty = 1;
                input("high", "surfids-tunnel/empty");
            } else {
                input("high", "surfids-tunnel/keyorg");
            }
        }
        case 6 {
            @ret = get("surfids-tunnel/keyorg");
            $key_org = $ret[1];
            if ("$key_org" eq "") {
                $empty = 1;
                input("high", "surfids-tunnel/empty");
            } else {
                input("high", "surfids-tunnel/keyemail");
            }
        }
        case 7 {
            @ret = get("surfids-tunnel/keyemail");
            $key_email = $ret[1];
            if ("$key_email" eq "") {
                $empty = 1;
                input("high", "surfids-tunnel/empty");
            } else {
                input("high", "surfids-tunnel/xinetd");
            }
        }
        case 8 {
            @ret = get("surfids-tunnel/xinetd");
            $xinetd = $ret[1];
            if ("$xinetd" eq "") {
                $empty = 1;
                input("high", "surfids-tunnel/empty");
            } else {
                input("high", "surfids-tunnel/hostname");
            }
        }
        case 9 {
            @ret = get("surfids-tunnel/hostname");
            $hostname = $ret[1];
            if ("$hostname" eq "") {
                $empty = 1;
                input("high", "surfids-tunnel/empty");
            } else {
                input("high", "surfids-tunnel/htpasswd");
            }
        }
        case 10 {
            @ret = get("surfids-tunnel/htpasswd");
            $htpasswd = $ret[1];
            if ("$htpasswd" eq "") {
                $empty = 1;
                input("high", "surfids-tunnel/empty");
            }
        }
    }
    # end
    if ($state > 0) {
        if ($empty == 1) {
            $empty = 0;
            $state--;
        } elsif ($state < 10) {
            my @ret = go();
            if ($ret[0] == 30) {
                $state--;
            } else {
                $state++;
            }
        } else {
            $state++;
        }
    }
}

if ($state == 0) {
    exit 1;
}

# Checking and fixing default serverkeys files
if (! -e "$targetdir/serverkeys/index.txt") {
  `touch $targetdir/serverkeys/index.txt 2>>$logfile`;
}
if (! -e "$targetdir/serverkeys/index.txt.old") {
  `touch $targetdir/serverkeys/index.txt.old 2>>$logfile`;
}
if (! -e "$targetdir/serverkeys/index.txt.attr") {
  `echo "unique_subject = no" > $targetdir/serverkeys/index.txt.attr 2>>$logfile`;
}
if (! -e "$targetdir/serverkeys/index.txt.attr.old") {
  `echo "unique_subject = no" > $targetdir/serverkeys/index.txt.attr.old 2>>$logfile`;
}
if (! -e "$targetdir/serverkeys/serial") {
  `echo "01" > $targetdir/serverkeys/serial 2>>$logfile`;
}
if (! -e "$targetdir/serverkeys/serial.old") {
  `echo "00" > $targetdir/serverkeys/serial.old 2>>$logfile`;
}

$perl = `grep perl $targetdir/genkeys/vars.conf | wc -l`;
chomp($perl);
if ($perl == 0) {
    `mv -f $targetdir/genkeys/vars.conf $targetdir/genkeys/old_vars.conf  2>>$logfile`;
}

if (! -e "$targetdir/genkeys/vars.conf") {
    `cp $targetdir/genkeys/vars.conf.dist $targetdir/genkeys/vars.conf`;

    # Setting up the vars.conf
    open(VARS, ">>$targetdir/genkeys/vars.conf");
    print VARS "\n";
    print VARS "\$key_config = \"\$c_surfidsdir/genkeys/openssl.cnf\";\n";
    print VARS "\$key_dir = \"\$c_surfidsdir/serverkeys/\";\n";
    print VARS "\$key_size = \"$key_size\";\n";
    print VARS "\$key_country = \"$key_country\";\n";
    print VARS "\$key_province = \"$key_prov\";\n";
    print VARS "\$key_city = \"$key_city\";\n";
    print VARS "\$key_org = \"$key_org\";\n";
    print VARS "\$key_email = \"$key_email\";\n";
    print VARS "\$key_unitname = \"SURFnet IDS\";\n";
    print VARS "\$key_commonname = \"server\";\n";
    print VARS "\$key_certtype = \"client\";\n";
    close(VARS);
} else {
    require "$targetdir/genkeys/vars.conf";
}

# Exporting variables to the environment
$ENV{"D"} = "$targetdir";
$ENV{"KEY_CONFIG"} = "$targetdir/genkeys/openssl.cnf";
$ENV{"KEY_DIR"} = "$targetdir/serverkeys/";
$ENV{"KEY_SIZE"} = $key_size;
$ENV{"KEY_COUNTRY"} = "$key_country";
$ENV{"KEY_PROVINCE"} = "$key_prov";
$ENV{"KEY_CITY"} = "$key_city";
$ENV{"KEY_ORG"} = "$key_org";
$ENV{"KEY_EMAIL"} = "$key_email";
$ENV{"KEY_UNITNAME"} = "SURFnet IDS";
$ENV{"KEY_COMMONNAME"} = "server";
$ENV{"KEY_CERTTYPE"} = "server";

# Generating ca.crt
if (! -e "$targetdir/serverkeys/ca.crt") {
    `$targetdir/genkeys/build-ca 2>>$logfile`;
} else {
    print LOG "ca.crt already exists, skipping generation!\n";
}

# Generating server certificate
if (! -e "$targetdir/serverkeys/tunserver.crt") {
    $ENV{"KEY_COMMONNAME"} = "$hostname";
    $ENV{"KEY_CERTTYPE"} = "server";

    `$targetdir/genkeys/build-key-server tunserver 2>>$logfile`;
} else {
    print LOG "tunserver.crt already exists, skipping generation!\n";
}

# Generate Diffie-Hellman parameters
if (! -e "$targetdir/serverkeys/dh${key_size}.pem") {
    `$targetdir/genkeys/build-dh`;
} else {
    print LOG "Diffie-Hellman parameters already exist, skipping generation!\n";
}

# Setting up xinetd
open(XINETD, ">$targetdir/xinetd.openvpn");
print XINETD "service openvpn\n";
print XINETD "\{\n";
print XINETD "  disable              = no\n";
print XINETD "  type                 = UNLISTED\n";
print XINETD "  port                 = 1194\n";
print XINETD "  socket_type          = stream\n";
print XINETD "  protocol             = tcp\n";
print XINETD "  wait                 = no\n";
print XINETD "  bind                 = $xinetd\n";
print XINETD "  user                 = root\n";
print XINETD "  server               = $targetdir/scripts/tcp-wrapper.pl\n";
print XINETD "\}\n";
close(XINETD);

`mv $targetdir/xinetd.openvpn /etc/xinetd.d/openvpn 2>>$logfile`;
`/etc/init.d/xinetd restart 2>>$logfile`;

# Setting up openvpn config
open(OPENVPN, ">>$targetdir/openvpn-server.conf");
print OPENVPN "status $targetdir/log/openvpn-status.log\n";
print OPENVPN "up $targetdir/scripts/up.pl\n";
print OPENVPN "down $targetdir/scripts/down.pl\n";
print OPENVPN "ipchange $targetdir/scripts/ipchange.pl\n";
print OPENVPN "dh $targetdir/serverkeys/dh${key_size}.pem\n";
print OPENVPN "ca $targetdir/serverkeys/ca.crt\n";
print OPENVPN "cert $targetdir/serverkeys/tunserver.crt\n";
print OPENVPN "key $targetdir/serverkeys/tunserver.key\n";
close(OPENVPN);

if (-e "/etc/surfnetids/openvpn.conf") {
    `mv /etc/surfnetids/openvpn.conf /etc/surfnetids/openvpn.conf-$ts 2>>$logfile`;
}
`mv $targetdir/openvpn-server.conf /etc/surfnetids/openvpn.conf 2>>$logfile`;

# Making sure the tun device is ready
if (! -d "/dev/net/") {
  `mkdir -f /dev/net/ 2>>$logfile`;
}

if (! -e "/dev/net/tun") {
  `mknod /dev/net/tun c 10 200 2>>$logfile`;
}

# Restarting cron
`/etc/init.d/cron restart 2>>$logfile`;

# Setting up apache configuration file
if (! -e "$apachesite/surfids-tunnel.conf") {
    `ln -s /etc/surfnetids/surfnetids-tn-apache.conf $apachesite/surfids-tunnel.conf 2>>$logfile`;
}

# Setting up apache authentication
`htpasswd -b -c -m $targetdir/.htpasswd idssensor $htpasswd 2>>$logfile`;

##########################################
##########################################
##########################################

$ENV{"SURFIDS_COMMONNAME"} = "$hostname CA";

if (! -d "$ssldir") {
    `mkdir $ssldir 2>>$logfile`;
}

if (! -e "$ssldir/ca.key") {
    `openssl genrsa -out $ssldir/ca.key $key_size 2>>$logfile`;
    `openssl req -new -x509 -config $targetdir/tntools/selfsigned.cnf -days 365 -key $ssldir/ca.key -out $ssldir/ca.crt 2>>$logfile`;
}
$ENV{"SURFIDS_COMMONNAME"} = $hostname;
if (! -e "$ssldir/key.pem") {
    `openssl genrsa -out $ssldir/key.pem $key_size 2>>$logfile`;
    `openssl req -new -config $targetdir/tntools/selfsigned.cnf -key $ssldir/key.pem -out $ssldir/request.pem 2>>$logfile`;
    `openssl x509 -req -days 365 -in $ssldir/request.pem -CA $ssldir/ca.crt -CAkey $ssldir/ca.key -set_serial 01 -out $ssldir/cert.pem 2>>$logfile`;
    `openssl rsa -in $ssldir/key.pem -out $ssldir/key.pem.insecure 2>>$logfile`;
    `mv $ssldir/key.pem $ssldir/key.pem.secure 2>>$logfile`;
    `mv $ssldir/key.pem.insecure $ssldir/key.pem 2>>$logfile`;
}

`a2enmod ssl 2>>$logfile`;

##########################################
##########################################
##########################################

# Checking the apache2 ports.conf file for the correct listening port (4443)
$chk = `cat /etc/apache2/ports.conf | grep -v '^#.*\$' | grep 4443 | wc -l 2>/dev/null`;
chomp($chk);

if ($chk == 0) {
    `echo "Listen $xinetd:4443" >> /etc/apache2/ports.conf 2>>$logfile`;
}

`/etc/init.d/apache2 restart 2>>$logfile`;

# Setting up permissions
`chmod 777 $targetdir/clientkeys/ 2>>$logfile`;
`chmod 777 $targetdir/serverkeys/ 2>>$logfile`;
`chmod +r $targetdir/serverkeys/ca.key 2>>$logfile`;

# RRD tool
if (! -d "/var/lib/rrd/") {
  `mkdir /var/lib/rrd/ 2>>$logfile`;
}

# Removing temporary files
`rm -f $targetdir/crontab.tn 2>/dev/null`;
`rm -f $targetdir/surfnetids-tn-apache.conf 2>/dev/null`;
`rm -f $targetdir/openvpn-server.conf 2>/dev/null`;
`rm -f $targetdir/install_tn.pl 2>/dev/null`;
`rm -f $targetdir/functions_tn.pl 2>/dev/null`;
`rm -f $targetdir/tunnel_remove.txt 2>/dev/null`;

if (-e "/etc/apache2/sites-available/surfnetids-tn-apache.conf") {
    `rm -f /etc/apache2/sites-available/surfnetids-tn-apache.conf 2>>$logfile`;
}
if (-e "/etc/apache2/sites-enabled/surfnetids-tn-apache.conf") {
    `rm -f /etc/apache2/sites-enabled/surfnetids-tn-apache.conf 2>>$logfile`;
}

if (-e "$targetdir/tunnel_remove.txt") {
  @list = `cat $targetdir/tunnel_remove.txt`;
  foreach $tar (@list) {
    chomp($tar);
    if ("$tar" ne "") {
      if ($tar !~ /.*\.\..*/) {
        if (-e "$targetdir/$tar") {
          `rm -f $targetdir/$tar 2>>$logfile`;
        }
      }
    }
  }
}

# Setting up surfids.log file
if (! -e "/var/log/surfids.log") {
  `echo "" >> /var/log/surfids.log`;
}
`chown www-data:adm /var/log/surfids.log`; 

$chk = `grep _unused_ /etc/iproute2/rt_tables | wc -l`;
chomp($chk);
if ($chk == 0) {
    my $ni = `tail -1 /etc/iproute2/rt_tables | awk '{print \$1}'`;
    chomp($ni);
    $ni++;
    if ($ni < 1001) {
        `echo "1000         _unused_" >> /etc/iproute2/rt_tables`;
    }
}

reset("surfids-tunnel/htpasswd");

close(LOG);
